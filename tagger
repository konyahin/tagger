#!/usr/bin/env sh
# disable warnings about variables are declared indirectly
# shellcheck disable=SC2154

## tagger - simple tagging system for any types of files

# Developer notes
# - 'tagger alias folder' for output alias and completion commands
# - add '_tagger_completion name folder` for aliases completion
# - check command for test tagger folder correctnes
# - you can make completition as separate task, maybe?
#   so you can get arguments and decide wath to complete

set -e

# Error handling and checks
err () {
    echo "$@" >&2
    exit
}

check () {
    name="$1"
    value="$2"
    desc="$3"

    pexist "$value" "$desc"
    shift 3

    for chk in "$@"
    do
        "$chk" "$value" "$desc"
    done

    [ -n "$name" ] && eval "$name=$value"
}

check_all () {
    name="$1"
    vars="$2"
    desc="$3"

    pexist "$vars" "$desc"
    shift 3

    for chk in "$@"
    do
        for var in $vars
        do
            "$chk" "$var" "$desc"
        done
    done

    [ -n "$name" ] && eval "$name=\"$vars\""
}

pexist () {
    [ -z "$1" ] &&
	err "$2 should be specified"
}

pnotagger () {
    [ -d "$BASE" ] &&
	err "$2 is already contain tagger: $1"
}

pfile () {
    [ ! -f "$1" ] &&
	err "$2 should exist and be a file: $1"
}

pdir () {
    [ ! -d "$1" ] &&
	err "$2 should exist and be a directory: $1"
}

ptagged () {
    [ ! -f "$BASE/$1" ] &&
	err "$2 should be added before: $1"
}

ptag () {
    [ ! -d "$BASE/../$1" ] &&
	  err "$2 should exist: $1"
}

pbase () {
    [ ! -d "$BASE" ] &&
	err "$2 should be initialized by tagger: $1"
}

# Script logic

##
## Usage:
##
## Common pattern is:
## 	tagger _folder_ command [arguments ...]
## 
print_help () {
	awk '/^##/{print substr($0, 4);}' "$SCRIPT"
	exit
}

## tagger _folder_ init
## 	create new folder structure, for
## 	keeping files and tags
##
init_tagger () {
    check "" "$1" folder pnotagger

    mkdir -p "$BASE"
}

## tagger _folder_ add [_file_ ...]
## 	move file to tagger in tagger folder
##
add_file () {
    check ""   "$1" "tagger folder" pdir pbase
    #check file "$3" file            pfile
    shift 2
    check_all files "$*" files pfile

    mv "$files" "$BASE"
}

## tagger _folder_ tag _file_ _tag_
## 	add tag to file from tagger folder
##
tag_file () {
    check folder "$1" "tagger folder" pdir pbase
    check file   "$3" file            ptagged
    check tag    "$4" tag

    tag_folder="$folder/$tag"
    mkdir -p "$tag_folder"
    ln -s "../.base/$file" "$tag_folder"
}

## tagger _folder_ untag _file_ _tag_
## 	remove tag from file in tagger folder
##
untag_file () {
    check folder "$1" "tagger folder" pdir pbase
    check file   "$3" file            ptagged
    check tag    "$4" tag             ptag

    tag_folder="$folder/$tag"
    rm -f "$tag_folder/$file"
}

## tagger _folder_ ls
## 	list all files under tagger folder
##
list () {
    check "" "$1" "tagger folder" pdir pbase
    ls -1 "$BASE"
}

## tagger _folder_ path _file_
## 	get path for tagged file
##
path () {
    check ""   "$1" "tagger folder" pdir pbase
    check file "$3" file            ptagged

    echo "$BASE/$file"
}

## tagger _folder_ rm _file_
##  remove file from tagger
##
remove () {
    check ""   "$1" "tagger folder" pdir pbase
    check file "$3" file            ptagged

    rm -f "$BASE"/../*/"$file"
    rm "$BASE/$file"
}

# Process arguments

SCRIPT=$(dirname "$0")/tagger
[ "$#" -lt 2 ] && print_help

BASE="$1/.base"
COMMAND="$2"

case "$COMMAND" in
    init)  init_tagger "$@" ;;
    add)   add_file    "$@" ;;
    tag)   tag_file    "$@" ;;
    untag) untag_file  "$@" ;;
    ls)    list        "$@" ;;
    path)  path        "$@" ;;
    rm)    remove      "$@" ;;
    *) err "Unknown command $COMMAND" ;;
esac
